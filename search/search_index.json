{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Galatasaray Everything about the Galatasaray from cli! Installation & Usage on Local Open your terminal and run: pip install --upgrade galatasaray galatasaray Install & Usage with Docker Open your terminal and run: docker run -ti ozcanyarimdunya/galatasaray","title":"Home"},{"location":"#galatasaray","text":"Everything about the Galatasaray from cli!","title":"Galatasaray"},{"location":"#installation-usage-on-local","text":"Open your terminal and run: pip install --upgrade galatasaray galatasaray","title":"Installation &amp; Usage on Local"},{"location":"#install-usage-with-docker","text":"Open your terminal and run: docker run -ti ozcanyarimdunya/galatasaray","title":"Install &amp; Usage with Docker"},{"location":"reference/galatasaray/","text":"Module galatasaray Sub-modules galatasaray.cli galatasaray.scrapper galatasaray.screen","title":"Index"},{"location":"reference/galatasaray/#module-galatasaray","text":"","title":"Module galatasaray"},{"location":"reference/galatasaray/#sub-modules","text":"galatasaray.cli galatasaray.scrapper galatasaray.screen","title":"Sub-modules"},{"location":"reference/galatasaray/cli/","text":"Module galatasaray.cli View Source import argparse from importlib import metadata from galatasaray.screen import Application def main (): \"\"\"The main entry point of the application.\"\"\" parser = argparse . ArgumentParser ( prog = \"galatasaray\" , description = \"Everything about the Galatasaray from cli!\" ) parser . add_argument ( \"-v\" , \"--version\" , action = \"version\" , version = metadata . version ( \"galatasaray\" ), help = \"show version and exit.\" , ) parser . parse_args () try : app = Application () app . run () except KeyboardInterrupt : pass except Exception as ex : print ( ex ) Functions main def main ( ) The main entry point of the application. View Source def main(): \"\"\"The main entry point of the application.\"\"\" parser = argparse.ArgumentParser(prog=\"galatasaray\", description=\"Everything about the Galatasaray from cli!\") parser.add_argument( \"-v\", \"--version\", action=\"version\", version=metadata.version(\"galatasaray\"), help=\"show version and exit.\", ) parser.parse_args() try: app = Application() app.run() except KeyboardInterrupt: pass except Exception as ex: print(ex)","title":"CLI"},{"location":"reference/galatasaray/cli/#module-galatasaraycli","text":"View Source import argparse from importlib import metadata from galatasaray.screen import Application def main (): \"\"\"The main entry point of the application.\"\"\" parser = argparse . ArgumentParser ( prog = \"galatasaray\" , description = \"Everything about the Galatasaray from cli!\" ) parser . add_argument ( \"-v\" , \"--version\" , action = \"version\" , version = metadata . version ( \"galatasaray\" ), help = \"show version and exit.\" , ) parser . parse_args () try : app = Application () app . run () except KeyboardInterrupt : pass except Exception as ex : print ( ex )","title":"Module galatasaray.cli"},{"location":"reference/galatasaray/cli/#functions","text":"","title":"Functions"},{"location":"reference/galatasaray/cli/#main","text":"def main ( ) The main entry point of the application. View Source def main(): \"\"\"The main entry point of the application.\"\"\" parser = argparse.ArgumentParser(prog=\"galatasaray\", description=\"Everything about the Galatasaray from cli!\") parser.add_argument( \"-v\", \"--version\", action=\"version\", version=metadata.version(\"galatasaray\"), help=\"show version and exit.\", ) parser.parse_args() try: app = Application() app.run() except KeyboardInterrupt: pass except Exception as ex: print(ex)","title":"main"},{"location":"reference/galatasaray/scrapper/","text":"Module galatasaray.scrapper View Source import requests from bs4 import BeautifulSoup class Scraper : BASE_URL = \"https://www.transfermarkt.com.tr\" TEAM_ID = 141 def __init__ ( self ): \"\"\" Create a new Scraper instance. base_url (str): The base URL of the website to scrape. team_id (int): The ID of the team to scrape. \"\"\" self . session = self . _initialize_session () self . soup = self . _get_initial_soup () @staticmethod def _initialize_session (): \"\"\" Create a new requests Session object. :returns: A new requests Session object. \"\"\" session = requests . Session () session . headers . update ( { \"User-Agent\" : ( \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6)\" \" AppleWebKit/537.36 (KHTML, like Gecko)\" \" Chrome/53.0.2785.143 Safari/537.36\" ), \"Accept-Encoding\" : \"gzip, deflate\" , \"Accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\" , \"DNT\" : \"1\" , \"Connection\" : \"keep-alive\" , \"Upgrade-Insecure-Requests\" : \"1\" } ) return session def _get_initial_soup ( self ): \"\"\" Get the initial soup for the team. :returns: A BeautifulSoup object representing the initial soup for the team. \"\"\" url = \" {} /galatasaray-istanbul/startseite/verein/ {} /saison_id\" . format ( self . BASE_URL , self . TEAM_ID ) response = self . session . get ( url ) return BeautifulSoup ( response . content , \"html.parser\" ) @property def matches ( self ): \"\"\" Get the next matches for the team. :returns: A list of dictionaries representing the next matches for the team. \"\"\" url = \" {} /ceapi/nextMatches/team/ {} \" . format ( self . BASE_URL , self . TEAM_ID ) return self . session . get ( url ) . json () @property def rumors ( self ): \"\"\" Get the rumors for the team. :returns: A list of dictionaries representing the rumors for the team. \"\"\" url = \" {} /ceapi/rumors/team/ {} \" . format ( self . BASE_URL , self . TEAM_ID ) return self . session . get ( url ) . json ()[ \"rumors\" ] @property def team_value ( self ): \"\"\" Get the team value. :returns: A string representing the team value. \"\"\" data = self . soup . select_one ( \"a.data-header__market-value-wrapper\" ) data . select_one ( \"p\" ) . clear () return data . get_text ( strip = True ) @property def cups ( self ): \"\"\" Get the cups won by the team. :returns: A list of strings representing the cups won by the team. \"\"\" return [ [ each . select_one ( \"span\" ) . get_text ( strip = True ), each . get ( \"title\" )] for each in self . soup . select ( \".data-header__badge-container a\" ) ] @property def standings ( self ): \"\"\" Get the current standings of the team. :returns: A list of lists representing the current standings of the team. \"\"\" standings = [] table = self . soup . find ( \"div\" , attrs = { \"data-viewport\" : \"Tabelle\" }) for each in table . select ( \"tbody tr\" ): n , _ , c , m , a , p = each . select ( \"td\" ) row = [ n . get_text ( strip = True ), # no c . get_text ( strip = True ), # club m . get_text ( strip = True ), # matches a . get_text ( strip = True ), # average p . get_text ( strip = True ), # points \"table-highlight\" in each . attrs . get ( \"class\" , []) # highlight ] standings . append ( row ) return standings @property def truths ( self ): \"\"\" Get the truths about the team. :returns: A dictionary representing the truths about the team. \"\"\" table = self . soup . find ( \"div\" , attrs = { \"data-viewport\" : \"Daten_und_Fakten\" }) truths = { \"legal_name\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"legalName\" }) . get_text ( strip = True ), \"address\" : \" \" . join ([ i . get_text ( strip = True ) for i in table . find_all ( \"div\" , attrs = { \"itemprop\" : \"address\" })]), \"telephone\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"telephone\" }) . get_text ( strip = True ), \"fax\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"faxNumber\" }) . get_text ( strip = True ), \"url\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"url\" }) . get_text ( strip = True ), \"founded\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"foundingDate\" }) . get_text ( strip = True ), \"members\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"member\" }) . get_text ( strip = True ) } return truths Classes Scraper class Scraper ( ) View Source class Scraper : BASE_URL = \"https://www.transfermarkt.com.tr\" TEAM_ID = 141 def __init__ ( self ): \"\"\" Create a new Scraper instance. base_url (str): The base URL of the website to scrape. team_id (int): The ID of the team to scrape. \"\"\" self . session = self . _initialize_session () self . soup = self . _get_initial_soup () @ staticmethod def _initialize_session (): \"\"\" Create a new requests Session object. :returns: A new requests Session object. \"\"\" session = requests . Session () session . headers . update ( { \"User-Agent\" : ( \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6)\" \" AppleWebKit/537.36 (KHTML, like Gecko)\" \" Chrome/53.0.2785.143 Safari/537.36\" ), \"Accept-Encoding\" : \"gzip, deflate\" , \"Accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\" , \"DNT\" : \"1\" , \"Connection\" : \"keep-alive\" , \"Upgrade-Insecure-Requests\" : \"1\" } ) return session def _get_initial_soup ( self ): \"\"\" Get the initial soup for the team. :returns: A BeautifulSoup object representing the initial soup for the team. \"\"\" url = \"{}/galatasaray-istanbul/startseite/verein/{}/saison_id\" . format ( self . BASE_URL , self . TEAM_ID ) response = self . session . get ( url ) return BeautifulSoup ( response . content , \"html.parser\" ) @ property def matches ( self ): \"\"\" Get the next matches for the team. :returns: A list of dictionaries representing the next matches for the team. \"\"\" url = \"{}/ceapi/nextMatches/team/{}\" . format ( self . BASE_URL , self . TEAM_ID ) return self . session . get ( url ). json () @ property def rumors ( self ): \"\"\" Get the rumors for the team. :returns: A list of dictionaries representing the rumors for the team. \"\"\" url = \"{}/ceapi/rumors/team/{}\" . format ( self . BASE_URL , self . TEAM_ID ) return self . session . get ( url ). json ()[ \"rumors\" ] @ property def team_value ( self ): \"\"\" Get the team value. :returns: A string representing the team value. \"\"\" data = self . soup . select_one ( \"a.data-header__market-value-wrapper\" ) data . select_one ( \"p\" ). clear () return data . get_text ( strip = True ) @ property def cups ( self ): \"\"\" Get the cups won by the team. :returns: A list of strings representing the cups won by the team. \"\"\" return [ [ each . select_one ( \"span\" ). get_text ( strip = True ), each . get ( \"title\" )] for each in self . soup . select ( \".data-header__badge-container a\" ) ] @ property def standings ( self ): \"\"\" Get the current standings of the team. :returns: A list of lists representing the current standings of the team. \"\"\" standings = [] table = self . soup . find ( \"div\" , attrs ={ \"data-viewport\" : \"Tabelle\" }) for each in table . select ( \"tbody tr\" ): n , _ , c , m , a , p = each . select ( \"td\" ) row = [ n . get_text ( strip = True ), # no c . get_text ( strip = True ), # club m . get_text ( strip = True ), # matches a . get_text ( strip = True ), # average p . get_text ( strip = True ), # points \"table-highlight\" in each . attrs . get ( \"class\" , []) # highlight ] standings . append ( row ) return standings @ property def truths ( self ): \"\"\" Get the truths about the team. :returns: A dictionary representing the truths about the team. \"\"\" table = self . soup . find ( \"div\" , attrs ={ \"data-viewport\" : \"Daten_und_Fakten\" }) truths = { \"legal_name\" : table . find ( \"span\" , attrs ={ \"itemprop\" : \"legalName\" }). get_text ( strip = True ), \"address\" : \" \" . join ([ i . get_text ( strip = True ) for i in table . find_all ( \"div\" , attrs ={ \"itemprop\" : \"address\" })]), \"telephone\" : table . find ( \"span\" , attrs ={ \"itemprop\" : \"telephone\" }). get_text ( strip = True ), \"fax\" : table . find ( \"span\" , attrs ={ \"itemprop\" : \"faxNumber\" }). get_text ( strip = True ), \"url\" : table . find ( \"span\" , attrs ={ \"itemprop\" : \"url\" }). get_text ( strip = True ), \"founded\" : table . find ( \"span\" , attrs ={ \"itemprop\" : \"foundingDate\" }). get_text ( strip = True ), \"members\" : table . find ( \"span\" , attrs ={ \"itemprop\" : \"member\" }). get_text ( strip = True ) } return truths Class variables BASE_URL TEAM_ID Instance variables cups Get the cups won by the team. matches Get the next matches for the team. rumors Get the rumors for the team. standings Get the current standings of the team. team_value Get the team value. truths Get the truths about the team.","title":"Scrapper"},{"location":"reference/galatasaray/scrapper/#module-galatasarayscrapper","text":"View Source import requests from bs4 import BeautifulSoup class Scraper : BASE_URL = \"https://www.transfermarkt.com.tr\" TEAM_ID = 141 def __init__ ( self ): \"\"\" Create a new Scraper instance. base_url (str): The base URL of the website to scrape. team_id (int): The ID of the team to scrape. \"\"\" self . session = self . _initialize_session () self . soup = self . _get_initial_soup () @staticmethod def _initialize_session (): \"\"\" Create a new requests Session object. :returns: A new requests Session object. \"\"\" session = requests . Session () session . headers . update ( { \"User-Agent\" : ( \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6)\" \" AppleWebKit/537.36 (KHTML, like Gecko)\" \" Chrome/53.0.2785.143 Safari/537.36\" ), \"Accept-Encoding\" : \"gzip, deflate\" , \"Accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\" , \"DNT\" : \"1\" , \"Connection\" : \"keep-alive\" , \"Upgrade-Insecure-Requests\" : \"1\" } ) return session def _get_initial_soup ( self ): \"\"\" Get the initial soup for the team. :returns: A BeautifulSoup object representing the initial soup for the team. \"\"\" url = \" {} /galatasaray-istanbul/startseite/verein/ {} /saison_id\" . format ( self . BASE_URL , self . TEAM_ID ) response = self . session . get ( url ) return BeautifulSoup ( response . content , \"html.parser\" ) @property def matches ( self ): \"\"\" Get the next matches for the team. :returns: A list of dictionaries representing the next matches for the team. \"\"\" url = \" {} /ceapi/nextMatches/team/ {} \" . format ( self . BASE_URL , self . TEAM_ID ) return self . session . get ( url ) . json () @property def rumors ( self ): \"\"\" Get the rumors for the team. :returns: A list of dictionaries representing the rumors for the team. \"\"\" url = \" {} /ceapi/rumors/team/ {} \" . format ( self . BASE_URL , self . TEAM_ID ) return self . session . get ( url ) . json ()[ \"rumors\" ] @property def team_value ( self ): \"\"\" Get the team value. :returns: A string representing the team value. \"\"\" data = self . soup . select_one ( \"a.data-header__market-value-wrapper\" ) data . select_one ( \"p\" ) . clear () return data . get_text ( strip = True ) @property def cups ( self ): \"\"\" Get the cups won by the team. :returns: A list of strings representing the cups won by the team. \"\"\" return [ [ each . select_one ( \"span\" ) . get_text ( strip = True ), each . get ( \"title\" )] for each in self . soup . select ( \".data-header__badge-container a\" ) ] @property def standings ( self ): \"\"\" Get the current standings of the team. :returns: A list of lists representing the current standings of the team. \"\"\" standings = [] table = self . soup . find ( \"div\" , attrs = { \"data-viewport\" : \"Tabelle\" }) for each in table . select ( \"tbody tr\" ): n , _ , c , m , a , p = each . select ( \"td\" ) row = [ n . get_text ( strip = True ), # no c . get_text ( strip = True ), # club m . get_text ( strip = True ), # matches a . get_text ( strip = True ), # average p . get_text ( strip = True ), # points \"table-highlight\" in each . attrs . get ( \"class\" , []) # highlight ] standings . append ( row ) return standings @property def truths ( self ): \"\"\" Get the truths about the team. :returns: A dictionary representing the truths about the team. \"\"\" table = self . soup . find ( \"div\" , attrs = { \"data-viewport\" : \"Daten_und_Fakten\" }) truths = { \"legal_name\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"legalName\" }) . get_text ( strip = True ), \"address\" : \" \" . join ([ i . get_text ( strip = True ) for i in table . find_all ( \"div\" , attrs = { \"itemprop\" : \"address\" })]), \"telephone\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"telephone\" }) . get_text ( strip = True ), \"fax\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"faxNumber\" }) . get_text ( strip = True ), \"url\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"url\" }) . get_text ( strip = True ), \"founded\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"foundingDate\" }) . get_text ( strip = True ), \"members\" : table . find ( \"span\" , attrs = { \"itemprop\" : \"member\" }) . get_text ( strip = True ) } return truths","title":"Module galatasaray.scrapper"},{"location":"reference/galatasaray/scrapper/#classes","text":"","title":"Classes"},{"location":"reference/galatasaray/scrapper/#scraper","text":"class Scraper ( ) View Source class Scraper : BASE_URL = \"https://www.transfermarkt.com.tr\" TEAM_ID = 141 def __init__ ( self ): \"\"\" Create a new Scraper instance. base_url (str): The base URL of the website to scrape. team_id (int): The ID of the team to scrape. \"\"\" self . session = self . _initialize_session () self . soup = self . _get_initial_soup () @ staticmethod def _initialize_session (): \"\"\" Create a new requests Session object. :returns: A new requests Session object. \"\"\" session = requests . Session () session . headers . update ( { \"User-Agent\" : ( \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6)\" \" AppleWebKit/537.36 (KHTML, like Gecko)\" \" Chrome/53.0.2785.143 Safari/537.36\" ), \"Accept-Encoding\" : \"gzip, deflate\" , \"Accept\" : \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\" , \"DNT\" : \"1\" , \"Connection\" : \"keep-alive\" , \"Upgrade-Insecure-Requests\" : \"1\" } ) return session def _get_initial_soup ( self ): \"\"\" Get the initial soup for the team. :returns: A BeautifulSoup object representing the initial soup for the team. \"\"\" url = \"{}/galatasaray-istanbul/startseite/verein/{}/saison_id\" . format ( self . BASE_URL , self . TEAM_ID ) response = self . session . get ( url ) return BeautifulSoup ( response . content , \"html.parser\" ) @ property def matches ( self ): \"\"\" Get the next matches for the team. :returns: A list of dictionaries representing the next matches for the team. \"\"\" url = \"{}/ceapi/nextMatches/team/{}\" . format ( self . BASE_URL , self . TEAM_ID ) return self . session . get ( url ). json () @ property def rumors ( self ): \"\"\" Get the rumors for the team. :returns: A list of dictionaries representing the rumors for the team. \"\"\" url = \"{}/ceapi/rumors/team/{}\" . format ( self . BASE_URL , self . TEAM_ID ) return self . session . get ( url ). json ()[ \"rumors\" ] @ property def team_value ( self ): \"\"\" Get the team value. :returns: A string representing the team value. \"\"\" data = self . soup . select_one ( \"a.data-header__market-value-wrapper\" ) data . select_one ( \"p\" ). clear () return data . get_text ( strip = True ) @ property def cups ( self ): \"\"\" Get the cups won by the team. :returns: A list of strings representing the cups won by the team. \"\"\" return [ [ each . select_one ( \"span\" ). get_text ( strip = True ), each . get ( \"title\" )] for each in self . soup . select ( \".data-header__badge-container a\" ) ] @ property def standings ( self ): \"\"\" Get the current standings of the team. :returns: A list of lists representing the current standings of the team. \"\"\" standings = [] table = self . soup . find ( \"div\" , attrs ={ \"data-viewport\" : \"Tabelle\" }) for each in table . select ( \"tbody tr\" ): n , _ , c , m , a , p = each . select ( \"td\" ) row = [ n . get_text ( strip = True ), # no c . get_text ( strip = True ), # club m . get_text ( strip = True ), # matches a . get_text ( strip = True ), # average p . get_text ( strip = True ), # points \"table-highlight\" in each . attrs . get ( \"class\" , []) # highlight ] standings . append ( row ) return standings @ property def truths ( self ): \"\"\" Get the truths about the team. :returns: A dictionary representing the truths about the team. \"\"\" table = self . soup . find ( \"div\" , attrs ={ \"data-viewport\" : \"Daten_und_Fakten\" }) truths = { \"legal_name\" : table . find ( \"span\" , attrs ={ \"itemprop\" : \"legalName\" }). get_text ( strip = True ), \"address\" : \" \" . join ([ i . get_text ( strip = True ) for i in table . find_all ( \"div\" , attrs ={ \"itemprop\" : \"address\" })]), \"telephone\" : table . find ( \"span\" , attrs ={ \"itemprop\" : \"telephone\" }). get_text ( strip = True ), \"fax\" : table . find ( \"span\" , attrs ={ \"itemprop\" : \"faxNumber\" }). get_text ( strip = True ), \"url\" : table . find ( \"span\" , attrs ={ \"itemprop\" : \"url\" }). get_text ( strip = True ), \"founded\" : table . find ( \"span\" , attrs ={ \"itemprop\" : \"foundingDate\" }). get_text ( strip = True ), \"members\" : table . find ( \"span\" , attrs ={ \"itemprop\" : \"member\" }). get_text ( strip = True ) } return truths","title":"Scraper"},{"location":"reference/galatasaray/scrapper/#class-variables","text":"BASE_URL TEAM_ID","title":"Class variables"},{"location":"reference/galatasaray/scrapper/#instance-variables","text":"cups Get the cups won by the team. matches Get the next matches for the team. rumors Get the rumors for the team. standings Get the current standings of the team. team_value Get the team value. truths Get the truths about the team.","title":"Instance variables"},{"location":"reference/galatasaray/screen/","text":"Module galatasaray.screen View Source from datetime import datetime from importlib import metadata from time import sleep from rich import box from rich.align import Align from rich.console import Group from rich.layout import Layout from rich.live import Live from rich.panel import Panel from rich.table import Table from rich.text import Text from galatasaray.scrapper import Scraper class Application : def __init__ ( self ): \"\"\" Initialize the application \"\"\" self . scrapper = Scraper () self . layout = Layout ( name = \"root\" ) self . layout . split ( Layout ( name = \"header\" , ratio = 3 ), Layout ( name = \"main\" , ratio = 12 ), Layout ( name = \"footer\" , ratio = 1 ), ) self . layout [ \"header\" ] . split_row ( Layout ( name = \"header-left\" , ratio = 1 ), Layout ( name = \"header-middle\" , ratio = 3 ), Layout ( name = \"header-right\" , ratio = 1 ), ) self . layout [ \"main\" ] . split_row ( Layout ( name = \"main-left\" , ratio = 1 ), Layout ( name = \"main-middle\" , ratio = 1 ), Layout ( name = \"main-right\" , ratio = 1 ) ) self . layout [ \"header-left\" ] . update ( self . get_header_left ()) self . layout [ \"header-middle\" ] . update ( self . get_header_middle ()) self . layout [ \"header-right\" ] . update ( self . get_header_right ()) self . layout [ \"main-left\" ] . update ( self . get_main_left ()) self . layout [ \"main-middle\" ] . update ( self . get_main_middle ()) self . layout [ \"main-right\" ] . update ( self . get_main_right ()) self . layout [ \"footer\" ] . update ( self . get_footer ()) def run ( self ): with Live ( self . layout , screen = True ): while True : sleep ( 1 ) def get_header_left ( self ): cups = Table . grid ( expand = True ) cups . add_column ( style = \"bold\" ) cups . add_column () cups . add_column () for count , title in self . scrapper . cups : cups . add_row ( count , \" \" , title ) return Panel ( Align . center ( cups , vertical = \"middle\" )) @staticmethod def get_header_middle (): logo = Group ( Align . center ( \":star::star::star::star: \\n \" ), Align . center ( \"[red]GALATA[/red][yellow]SARAY[/yellow] \\n \" ), Align . center ( \"1905\" ), ) return Panel ( Align . center ( logo , vertical = \"middle\" ), style = \"bold\" , padding = 1 ) def get_header_right ( self ): return Panel ( Align . center ( f \"Kadro de\u011feri \\n [b] { self . scrapper . team_value } [/b]\" , vertical = \"middle\" )) def get_main_left_top ( self ): standings = Table ( expand = True , box = box . SIMPLE ) standings . add_column ( header = \"#\" ) standings . add_column ( header = \"Kul\u00fcp\" ) standings . add_column ( header = \"Ma\u00e7lar\" ) standings . add_column ( header = \"+/-\" ) standings . add_column ( header = \"Puan\" ) for no , club , matches , average , points , highlight in self . scrapper . standings : style = \"u yellow on red\" if highlight else None standings . add_row ( no , club , matches , average , points , style = style ) return Panel ( standings , title = \"[cyan][b]TABLO KES\u0130T\u0130 S\u00dcPER L\u0130G[/b][/cyan]\" , box = box . SQUARE ) def get_main_left_bottom ( self ): truths = Table . grid ( expand = True ) truths . add_column () truths . add_column () truths . add_column () tr = self . scrapper . truths truths . add_row ( \"Resmi kul\u00fcp ad\u0131\" , \": \" , tr [ \"legal_name\" ]) truths . add_row ( \"Adres\" , \": \" , tr [ \"address\" ]) truths . add_row ( \"Tel\" , \": \" , tr [ \"telephone\" ]) truths . add_row ( \"Faks\" , \": \" , tr [ \"fax\" ]) truths . add_row ( \"Web sayfas\u0131\" , \": \" , tr [ \"url\" ]) truths . add_row ( \"Kurulu\u015f\" , \": \" , tr [ \"founded\" ]) truths . add_row ( \"\u00dcyeler\" , \": \" , tr [ \"members\" ]) return Panel ( truths , title = \"[cyan][b]VER\u0130LER & GER\u00c7EKLER[/b][cyan]\" , box = box . SQUARE ) def get_main_left ( self ): left_top = self . get_main_left_top () left_bottom = self . get_main_left_bottom () return Panel ( Group ( left_top , left_bottom ), box = box . SIMPLE ) def get_main_middle ( self ): data = self . scrapper . matches next_matches = data [ \"matches\" ][: 6 ] items = [] for each in next_matches : matches = Table . grid ( expand = True ) matches . add_column () matches . add_column ( justify = \"center\" ) matches . add_column () matches . add_row ( \"\" , each [ \"competition\" ][ \"label\" ], \"\" ) matches . add_row ( \"\" , datetime . fromtimestamp ( each [ \"match\" ][ \"time\" ]) . strftime ( \" %d .%m.%Y %A - %H:%M\" ), \"\" ) matches . add_row ( Align . left ( data [ \"teams\" ][ str ( each [ \"match\" ][ \"home\" ])][ \"name\" ]), each [ \"match\" ][ \"result\" ], Align . right ( data [ \"teams\" ][ str ( each [ \"match\" ][ \"away\" ])][ \"name\" ]), ) items . append ( Panel ( matches , padding = ( 0 , 3 ), box = box . HORIZONTALS )) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]SONRAK\u0130 KAR\u015eILA\u015eMALAR[/b][/cyan]\" ), box = box . SIMPLE ) def get_main_right ( self ): items = [] for each in self . scrapper . rumors [: 4 ]: rumors = Table . grid ( expand = True ) rumors . add_column () rumors . add_column ( justify = \"center\" ) rumors . add_column () rumors . add_row ( \"\" , each [ \"player\" ][ \"name\" ], \"\" , style = \"bold\" ) rumors . add_row ( \"Ya\u015f\" , \": \" , str ( each [ \"player\" ][ \"age\" ])) rumors . add_row ( \"Mevki\" , \": \" , each [ \"player\" ][ \"position\" ]) rumors . add_row ( \"Piyasa de\u011feri\" , \": \" , each [ \"player\" ][ \"marketValue\" ]) rumors . add_row ( each [ \"team1\" ][ \"name\" ], \">> \" , each [ \"team2\" ][ \"name\" ], style = \"bold italic\" ) items . append ( Panel ( rumors , padding = ( 0 , 3 ), box = box . HORIZONTALS ), ) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]G\u00dcNCEL S\u00d6YLENT\u0130LER[/b][/cyan]\" ), box = box . SIMPLE ) @staticmethod def get_footer (): table = Table . grid ( expand = True ) table . add_column () table . add_row ( Align . center ( Text ( \"ozcanyarimdunya\" , style = \"link https://yarimdunya.com\" ) + \" @ {} \" . format ( datetime . today () . year ) ) ) table . add_row ( Align . center ( \"v {} \" . format ( metadata . version ( \"galatasaray\" )) ) ) return Panel ( table , box = box . SIMPLE ) Classes Application class Application ( ) View Source class Application : def __init__ ( self ) : \"\"\" Initialize the application \"\"\" self . scrapper = Scraper () self . layout = Layout ( name = \"root\" ) self . layout . split ( Layout ( name = \"header\" , ratio = 3 ), Layout ( name = \"main\" , ratio = 12 ), Layout ( name = \"footer\" , ratio = 1 ), ) self . layout [ \"header\" ] . split_row ( Layout ( name = \"header-left\" , ratio = 1 ), Layout ( name = \"header-middle\" , ratio = 3 ), Layout ( name = \"header-right\" , ratio = 1 ), ) self . layout [ \"main\" ] . split_row ( Layout ( name = \"main-left\" , ratio = 1 ), Layout ( name = \"main-middle\" , ratio = 1 ), Layout ( name = \"main-right\" , ratio = 1 ) ) self . layout [ \"header-left\" ] . update ( self . get_header_left ()) self . layout [ \"header-middle\" ] . update ( self . get_header_middle ()) self . layout [ \"header-right\" ] . update ( self . get_header_right ()) self . layout [ \"main-left\" ] . update ( self . get_main_left ()) self . layout [ \"main-middle\" ] . update ( self . get_main_middle ()) self . layout [ \"main-right\" ] . update ( self . get_main_right ()) self . layout [ \"footer\" ] . update ( self . get_footer ()) def run ( self ) : with Live ( self . layout , screen = True ) : while True : sleep ( 1 ) def get_header_left ( self ) : cups = Table . grid ( expand = True ) cups . add_column ( style = \"bold\" ) cups . add_column () cups . add_column () for count , title in self . scrapper . cups : cups . add_row ( count , \" \" , title ) return Panel ( Align . center ( cups , vertical = \"middle\" )) @staticmethod def get_header_middle () : logo = Group ( Align . center ( \":star::star::star::star:\\n\" ), Align . center ( \"[red]GALATA[/red][yellow]SARAY[/yellow]\\n\" ), Align . center ( \"1905\" ), ) return Panel ( Align . center ( logo , vertical = \"middle\" ), style = \"bold\" , padding = 1 ) def get_header_right ( self ) : return Panel ( Align . center ( f \"Kadro de\u011feri\\n[b]{self.scrapper.team_value}[/b]\" , vertical = \"middle\" )) def get_main_left_top ( self ) : standings = Table ( expand = True , box = box . SIMPLE ) standings . add_column ( header = \"#\" ) standings . add_column ( header = \"Kul\u00fcp\" ) standings . add_column ( header = \"Ma\u00e7lar\" ) standings . add_column ( header = \"+/-\" ) standings . add_column ( header = \"Puan\" ) for no , club , matches , average , points , highlight in self . scrapper . standings : style = \"u yellow on red\" if highlight else None standings . add_row ( no , club , matches , average , points , style = style ) return Panel ( standings , title = \"[cyan][b]TABLO KES\u0130T\u0130 S\u00dcPER L\u0130G[/b][/cyan]\" , box = box . SQUARE ) def get_main_left_bottom ( self ) : truths = Table . grid ( expand = True ) truths . add_column () truths . add_column () truths . add_column () tr = self . scrapper . truths truths . add_row ( \"Resmi kul\u00fcp ad\u0131\" , \": \" , tr [ \"legal_name\" ] ) truths . add_row ( \"Adres\" , \": \" , tr [ \"address\" ] ) truths . add_row ( \"Tel\" , \": \" , tr [ \"telephone\" ] ) truths . add_row ( \"Faks\" , \": \" , tr [ \"fax\" ] ) truths . add_row ( \"Web sayfas\u0131\" , \": \" , tr [ \"url\" ] ) truths . add_row ( \"Kurulu\u015f\" , \": \" , tr [ \"founded\" ] ) truths . add_row ( \"\u00dcyeler\" , \": \" , tr [ \"members\" ] ) return Panel ( truths , title = \"[cyan][b]VER\u0130LER & GER\u00c7EKLER[/b][cyan]\" , box = box . SQUARE ) def get_main_left ( self ) : left_top = self . get_main_left_top () left_bottom = self . get_main_left_bottom () return Panel ( Group ( left_top , left_bottom ), box = box . SIMPLE ) def get_main_middle ( self ) : data = self . scrapper . matches next_matches = data [ \"matches\" ][ :6 ] items = [] for each in next_matches : matches = Table . grid ( expand = True ) matches . add_column () matches . add_column ( justify = \"center\" ) matches . add_column () matches . add_row ( \"\" , each [ \"competition\" ][ \"label\" ] , \"\" ) matches . add_row ( \"\" , datetime . fromtimestamp ( each [ \"match\" ][ \"time\" ] ). strftime ( \"%d.%m.%Y %A - %H:%M\" ), \"\" ) matches . add_row ( Align . left ( data [ \"teams\" ][ str(each[\"match\" ][ \"home\" ] ) ] [ \"name\" ] ), each [ \"match\" ][ \"result\" ] , Align . right ( data [ \"teams\" ][ str(each[\"match\" ][ \"away\" ] ) ] [ \"name\" ] ), ) items . append ( Panel ( matches , padding = ( 0 , 3 ), box = box . HORIZONTALS )) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]SONRAK\u0130 KAR\u015eILA\u015eMALAR[/b][/cyan]\" ), box = box . SIMPLE ) def get_main_right ( self ) : items = [] for each in self . scrapper . rumors [ :4 ] : rumors = Table . grid ( expand = True ) rumors . add_column () rumors . add_column ( justify = \"center\" ) rumors . add_column () rumors . add_row ( \"\" , each [ \"player\" ][ \"name\" ] , \"\" , style = \"bold\" ) rumors . add_row ( \"Ya\u015f\" , \": \" , str ( each [ \"player\" ][ \"age\" ] )) rumors . add_row ( \"Mevki\" , \": \" , each [ \"player\" ][ \"position\" ] ) rumors . add_row ( \"Piyasa de\u011feri\" , \": \" , each [ \"player\" ][ \"marketValue\" ] ) rumors . add_row ( each [ \"team1\" ][ \"name\" ] , \">> \" , each [ \"team2\" ][ \"name\" ] , style = \"bold italic\" ) items . append ( Panel ( rumors , padding = ( 0 , 3 ), box = box . HORIZONTALS ), ) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]G\u00dcNCEL S\u00d6YLENT\u0130LER[/b][/cyan]\" ), box = box . SIMPLE ) @staticmethod def get_footer () : table = Table . grid ( expand = True ) table . add_column () table . add_row ( Align . center ( Text ( \"ozcanyarimdunya\" , style = \"link https://yarimdunya.com\" ) + \" @ {}\" . format ( datetime . today (). year ) ) ) table . add_row ( Align . center ( \"v{}\" . format ( metadata . version ( \"galatasaray\" )) ) ) return Panel ( table , box = box . SIMPLE ) Static methods get_footer def get_footer ( ) View Source @staticmethod def get_footer () : table = Table . grid ( expand = True ) table . add_column () table . add_row ( Align . center ( Text ( \"ozcanyarimdunya\" , style = \"link https://yarimdunya.com\" ) + \" @ {}\" . format ( datetime . today (). year ) ) ) table . add_row ( Align . center ( \"v{}\" . format ( metadata . version ( \"galatasaray\" )) ) ) return Panel ( table , box = box . SIMPLE ) get_header_middle def get_header_middle ( ) View Source @staticmethod def get_header_middle () : logo = Group ( Align . center ( \":star::star::star::star:\\n\" ), Align . center ( \"[red]GALATA[/red][yellow]SARAY[/yellow]\\n\" ), Align . center ( \"1905\" ), ) return Panel ( Align . center ( logo , vertical = \"middle\" ), style = \"bold\" , padding = 1 ) Methods get_header_left def get_header_left ( self ) View Source def get_header_left(self): cups = Table.grid(expand=True) cups.add_column(style=\"bold\") cups.add_column() cups.add_column() for count, title in self.scrapper.cups: cups.add_row(count, \" \", title) return Panel(Align.center(cups, vertical=\"middle\")) get_header_right def get_header_right ( self ) View Source def get_header_right ( self ) : return Panel ( Align . center ( f \"Kadro de\u011feri\\n[b]{self.scrapper.team_value}[/b]\" , vertical = \"middle\" )) get_main_left def get_main_left ( self ) View Source def get_main_left(self): left_top = self.get_main_left_top() left_bottom = self.get_main_left_bottom() return Panel(Group(left_top, left_bottom), box=box.SIMPLE) get_main_left_bottom def get_main_left_bottom ( self ) View Source def get_main_left_bottom ( self ) : truths = Table . grid ( expand = True ) truths . add_column () truths . add_column () truths . add_column () tr = self . scrapper . truths truths . add_row ( \"Resmi kul\u00fcp ad\u0131\" , \": \" , tr [ \"legal_name\" ] ) truths . add_row ( \"Adres\" , \": \" , tr [ \"address\" ] ) truths . add_row ( \"Tel\" , \": \" , tr [ \"telephone\" ] ) truths . add_row ( \"Faks\" , \": \" , tr [ \"fax\" ] ) truths . add_row ( \"Web sayfas\u0131\" , \": \" , tr [ \"url\" ] ) truths . add_row ( \"Kurulu\u015f\" , \": \" , tr [ \"founded\" ] ) truths . add_row ( \"\u00dcyeler\" , \": \" , tr [ \"members\" ] ) return Panel ( truths , title = \"[cyan][b]VER\u0130LER & GER\u00c7EKLER[/b][cyan]\" , box = box . SQUARE ) get_main_left_top def get_main_left_top ( self ) View Source def get_main_left_top ( self ) : standings = Table ( expand = True , box = box . SIMPLE ) standings . add_column ( header = \"#\" ) standings . add_column ( header = \"Kul\u00fcp\" ) standings . add_column ( header = \"Ma\u00e7lar\" ) standings . add_column ( header = \"+/-\" ) standings . add_column ( header = \"Puan\" ) for no , club , matches , average , points , highlight in self . scrapper . standings : style = \"u yellow on red\" if highlight else None standings . add_row ( no , club , matches , average , points , style = style ) return Panel ( standings , title = \"[cyan][b]TABLO KES\u0130T\u0130 S\u00dcPER L\u0130G[/b][/cyan]\" , box = box . SQUARE ) get_main_middle def get_main_middle ( self ) View Source def get_main_middle ( self ) : data = self . scrapper . matches next_matches = data [ \"matches\" ][ :6 ] items = [] for each in next_matches : matches = Table . grid ( expand = True ) matches . add_column () matches . add_column ( justify = \"center\" ) matches . add_column () matches . add_row ( \"\" , each [ \"competition\" ][ \"label\" ] , \"\" ) matches . add_row ( \"\" , datetime . fromtimestamp ( each [ \"match\" ][ \"time\" ] ). strftime ( \"%d.%m.%Y %A - %H:%M\" ), \"\" ) matches . add_row ( Align . left ( data [ \"teams\" ][ str(each[\"match\" ][ \"home\" ] ) ] [ \"name\" ] ), each [ \"match\" ][ \"result\" ] , Align . right ( data [ \"teams\" ][ str(each[\"match\" ][ \"away\" ] ) ] [ \"name\" ] ), ) items . append ( Panel ( matches , padding = ( 0 , 3 ), box = box . HORIZONTALS )) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]SONRAK\u0130 KAR\u015eILA\u015eMALAR[/b][/cyan]\" ), box = box . SIMPLE ) get_main_right def get_main_right ( self ) View Source def get_main_right ( self ) : items = [] for each in self . scrapper . rumors [ :4 ] : rumors = Table . grid ( expand = True ) rumors . add_column () rumors . add_column ( justify = \"center\" ) rumors . add_column () rumors . add_row ( \"\" , each [ \"player\" ][ \"name\" ] , \"\" , style = \"bold\" ) rumors . add_row ( \"Ya\u015f\" , \": \" , str ( each [ \"player\" ][ \"age\" ] )) rumors . add_row ( \"Mevki\" , \": \" , each [ \"player\" ][ \"position\" ] ) rumors . add_row ( \"Piyasa de\u011feri\" , \": \" , each [ \"player\" ][ \"marketValue\" ] ) rumors . add_row ( each [ \"team1\" ][ \"name\" ] , \">> \" , each [ \"team2\" ][ \"name\" ] , style = \"bold italic\" ) items . append ( Panel ( rumors , padding = ( 0 , 3 ), box = box . HORIZONTALS ), ) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]G\u00dcNCEL S\u00d6YLENT\u0130LER[/b][/cyan]\" ), box = box . SIMPLE ) run def run ( self ) View Source def run ( self ) : with Live ( self . layout , screen = True ) : while True : sleep ( 1 )","title":"Screen"},{"location":"reference/galatasaray/screen/#module-galatasarayscreen","text":"View Source from datetime import datetime from importlib import metadata from time import sleep from rich import box from rich.align import Align from rich.console import Group from rich.layout import Layout from rich.live import Live from rich.panel import Panel from rich.table import Table from rich.text import Text from galatasaray.scrapper import Scraper class Application : def __init__ ( self ): \"\"\" Initialize the application \"\"\" self . scrapper = Scraper () self . layout = Layout ( name = \"root\" ) self . layout . split ( Layout ( name = \"header\" , ratio = 3 ), Layout ( name = \"main\" , ratio = 12 ), Layout ( name = \"footer\" , ratio = 1 ), ) self . layout [ \"header\" ] . split_row ( Layout ( name = \"header-left\" , ratio = 1 ), Layout ( name = \"header-middle\" , ratio = 3 ), Layout ( name = \"header-right\" , ratio = 1 ), ) self . layout [ \"main\" ] . split_row ( Layout ( name = \"main-left\" , ratio = 1 ), Layout ( name = \"main-middle\" , ratio = 1 ), Layout ( name = \"main-right\" , ratio = 1 ) ) self . layout [ \"header-left\" ] . update ( self . get_header_left ()) self . layout [ \"header-middle\" ] . update ( self . get_header_middle ()) self . layout [ \"header-right\" ] . update ( self . get_header_right ()) self . layout [ \"main-left\" ] . update ( self . get_main_left ()) self . layout [ \"main-middle\" ] . update ( self . get_main_middle ()) self . layout [ \"main-right\" ] . update ( self . get_main_right ()) self . layout [ \"footer\" ] . update ( self . get_footer ()) def run ( self ): with Live ( self . layout , screen = True ): while True : sleep ( 1 ) def get_header_left ( self ): cups = Table . grid ( expand = True ) cups . add_column ( style = \"bold\" ) cups . add_column () cups . add_column () for count , title in self . scrapper . cups : cups . add_row ( count , \" \" , title ) return Panel ( Align . center ( cups , vertical = \"middle\" )) @staticmethod def get_header_middle (): logo = Group ( Align . center ( \":star::star::star::star: \\n \" ), Align . center ( \"[red]GALATA[/red][yellow]SARAY[/yellow] \\n \" ), Align . center ( \"1905\" ), ) return Panel ( Align . center ( logo , vertical = \"middle\" ), style = \"bold\" , padding = 1 ) def get_header_right ( self ): return Panel ( Align . center ( f \"Kadro de\u011feri \\n [b] { self . scrapper . team_value } [/b]\" , vertical = \"middle\" )) def get_main_left_top ( self ): standings = Table ( expand = True , box = box . SIMPLE ) standings . add_column ( header = \"#\" ) standings . add_column ( header = \"Kul\u00fcp\" ) standings . add_column ( header = \"Ma\u00e7lar\" ) standings . add_column ( header = \"+/-\" ) standings . add_column ( header = \"Puan\" ) for no , club , matches , average , points , highlight in self . scrapper . standings : style = \"u yellow on red\" if highlight else None standings . add_row ( no , club , matches , average , points , style = style ) return Panel ( standings , title = \"[cyan][b]TABLO KES\u0130T\u0130 S\u00dcPER L\u0130G[/b][/cyan]\" , box = box . SQUARE ) def get_main_left_bottom ( self ): truths = Table . grid ( expand = True ) truths . add_column () truths . add_column () truths . add_column () tr = self . scrapper . truths truths . add_row ( \"Resmi kul\u00fcp ad\u0131\" , \": \" , tr [ \"legal_name\" ]) truths . add_row ( \"Adres\" , \": \" , tr [ \"address\" ]) truths . add_row ( \"Tel\" , \": \" , tr [ \"telephone\" ]) truths . add_row ( \"Faks\" , \": \" , tr [ \"fax\" ]) truths . add_row ( \"Web sayfas\u0131\" , \": \" , tr [ \"url\" ]) truths . add_row ( \"Kurulu\u015f\" , \": \" , tr [ \"founded\" ]) truths . add_row ( \"\u00dcyeler\" , \": \" , tr [ \"members\" ]) return Panel ( truths , title = \"[cyan][b]VER\u0130LER & GER\u00c7EKLER[/b][cyan]\" , box = box . SQUARE ) def get_main_left ( self ): left_top = self . get_main_left_top () left_bottom = self . get_main_left_bottom () return Panel ( Group ( left_top , left_bottom ), box = box . SIMPLE ) def get_main_middle ( self ): data = self . scrapper . matches next_matches = data [ \"matches\" ][: 6 ] items = [] for each in next_matches : matches = Table . grid ( expand = True ) matches . add_column () matches . add_column ( justify = \"center\" ) matches . add_column () matches . add_row ( \"\" , each [ \"competition\" ][ \"label\" ], \"\" ) matches . add_row ( \"\" , datetime . fromtimestamp ( each [ \"match\" ][ \"time\" ]) . strftime ( \" %d .%m.%Y %A - %H:%M\" ), \"\" ) matches . add_row ( Align . left ( data [ \"teams\" ][ str ( each [ \"match\" ][ \"home\" ])][ \"name\" ]), each [ \"match\" ][ \"result\" ], Align . right ( data [ \"teams\" ][ str ( each [ \"match\" ][ \"away\" ])][ \"name\" ]), ) items . append ( Panel ( matches , padding = ( 0 , 3 ), box = box . HORIZONTALS )) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]SONRAK\u0130 KAR\u015eILA\u015eMALAR[/b][/cyan]\" ), box = box . SIMPLE ) def get_main_right ( self ): items = [] for each in self . scrapper . rumors [: 4 ]: rumors = Table . grid ( expand = True ) rumors . add_column () rumors . add_column ( justify = \"center\" ) rumors . add_column () rumors . add_row ( \"\" , each [ \"player\" ][ \"name\" ], \"\" , style = \"bold\" ) rumors . add_row ( \"Ya\u015f\" , \": \" , str ( each [ \"player\" ][ \"age\" ])) rumors . add_row ( \"Mevki\" , \": \" , each [ \"player\" ][ \"position\" ]) rumors . add_row ( \"Piyasa de\u011feri\" , \": \" , each [ \"player\" ][ \"marketValue\" ]) rumors . add_row ( each [ \"team1\" ][ \"name\" ], \">> \" , each [ \"team2\" ][ \"name\" ], style = \"bold italic\" ) items . append ( Panel ( rumors , padding = ( 0 , 3 ), box = box . HORIZONTALS ), ) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]G\u00dcNCEL S\u00d6YLENT\u0130LER[/b][/cyan]\" ), box = box . SIMPLE ) @staticmethod def get_footer (): table = Table . grid ( expand = True ) table . add_column () table . add_row ( Align . center ( Text ( \"ozcanyarimdunya\" , style = \"link https://yarimdunya.com\" ) + \" @ {} \" . format ( datetime . today () . year ) ) ) table . add_row ( Align . center ( \"v {} \" . format ( metadata . version ( \"galatasaray\" )) ) ) return Panel ( table , box = box . SIMPLE )","title":"Module galatasaray.screen"},{"location":"reference/galatasaray/screen/#classes","text":"","title":"Classes"},{"location":"reference/galatasaray/screen/#application","text":"class Application ( ) View Source class Application : def __init__ ( self ) : \"\"\" Initialize the application \"\"\" self . scrapper = Scraper () self . layout = Layout ( name = \"root\" ) self . layout . split ( Layout ( name = \"header\" , ratio = 3 ), Layout ( name = \"main\" , ratio = 12 ), Layout ( name = \"footer\" , ratio = 1 ), ) self . layout [ \"header\" ] . split_row ( Layout ( name = \"header-left\" , ratio = 1 ), Layout ( name = \"header-middle\" , ratio = 3 ), Layout ( name = \"header-right\" , ratio = 1 ), ) self . layout [ \"main\" ] . split_row ( Layout ( name = \"main-left\" , ratio = 1 ), Layout ( name = \"main-middle\" , ratio = 1 ), Layout ( name = \"main-right\" , ratio = 1 ) ) self . layout [ \"header-left\" ] . update ( self . get_header_left ()) self . layout [ \"header-middle\" ] . update ( self . get_header_middle ()) self . layout [ \"header-right\" ] . update ( self . get_header_right ()) self . layout [ \"main-left\" ] . update ( self . get_main_left ()) self . layout [ \"main-middle\" ] . update ( self . get_main_middle ()) self . layout [ \"main-right\" ] . update ( self . get_main_right ()) self . layout [ \"footer\" ] . update ( self . get_footer ()) def run ( self ) : with Live ( self . layout , screen = True ) : while True : sleep ( 1 ) def get_header_left ( self ) : cups = Table . grid ( expand = True ) cups . add_column ( style = \"bold\" ) cups . add_column () cups . add_column () for count , title in self . scrapper . cups : cups . add_row ( count , \" \" , title ) return Panel ( Align . center ( cups , vertical = \"middle\" )) @staticmethod def get_header_middle () : logo = Group ( Align . center ( \":star::star::star::star:\\n\" ), Align . center ( \"[red]GALATA[/red][yellow]SARAY[/yellow]\\n\" ), Align . center ( \"1905\" ), ) return Panel ( Align . center ( logo , vertical = \"middle\" ), style = \"bold\" , padding = 1 ) def get_header_right ( self ) : return Panel ( Align . center ( f \"Kadro de\u011feri\\n[b]{self.scrapper.team_value}[/b]\" , vertical = \"middle\" )) def get_main_left_top ( self ) : standings = Table ( expand = True , box = box . SIMPLE ) standings . add_column ( header = \"#\" ) standings . add_column ( header = \"Kul\u00fcp\" ) standings . add_column ( header = \"Ma\u00e7lar\" ) standings . add_column ( header = \"+/-\" ) standings . add_column ( header = \"Puan\" ) for no , club , matches , average , points , highlight in self . scrapper . standings : style = \"u yellow on red\" if highlight else None standings . add_row ( no , club , matches , average , points , style = style ) return Panel ( standings , title = \"[cyan][b]TABLO KES\u0130T\u0130 S\u00dcPER L\u0130G[/b][/cyan]\" , box = box . SQUARE ) def get_main_left_bottom ( self ) : truths = Table . grid ( expand = True ) truths . add_column () truths . add_column () truths . add_column () tr = self . scrapper . truths truths . add_row ( \"Resmi kul\u00fcp ad\u0131\" , \": \" , tr [ \"legal_name\" ] ) truths . add_row ( \"Adres\" , \": \" , tr [ \"address\" ] ) truths . add_row ( \"Tel\" , \": \" , tr [ \"telephone\" ] ) truths . add_row ( \"Faks\" , \": \" , tr [ \"fax\" ] ) truths . add_row ( \"Web sayfas\u0131\" , \": \" , tr [ \"url\" ] ) truths . add_row ( \"Kurulu\u015f\" , \": \" , tr [ \"founded\" ] ) truths . add_row ( \"\u00dcyeler\" , \": \" , tr [ \"members\" ] ) return Panel ( truths , title = \"[cyan][b]VER\u0130LER & GER\u00c7EKLER[/b][cyan]\" , box = box . SQUARE ) def get_main_left ( self ) : left_top = self . get_main_left_top () left_bottom = self . get_main_left_bottom () return Panel ( Group ( left_top , left_bottom ), box = box . SIMPLE ) def get_main_middle ( self ) : data = self . scrapper . matches next_matches = data [ \"matches\" ][ :6 ] items = [] for each in next_matches : matches = Table . grid ( expand = True ) matches . add_column () matches . add_column ( justify = \"center\" ) matches . add_column () matches . add_row ( \"\" , each [ \"competition\" ][ \"label\" ] , \"\" ) matches . add_row ( \"\" , datetime . fromtimestamp ( each [ \"match\" ][ \"time\" ] ). strftime ( \"%d.%m.%Y %A - %H:%M\" ), \"\" ) matches . add_row ( Align . left ( data [ \"teams\" ][ str(each[\"match\" ][ \"home\" ] ) ] [ \"name\" ] ), each [ \"match\" ][ \"result\" ] , Align . right ( data [ \"teams\" ][ str(each[\"match\" ][ \"away\" ] ) ] [ \"name\" ] ), ) items . append ( Panel ( matches , padding = ( 0 , 3 ), box = box . HORIZONTALS )) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]SONRAK\u0130 KAR\u015eILA\u015eMALAR[/b][/cyan]\" ), box = box . SIMPLE ) def get_main_right ( self ) : items = [] for each in self . scrapper . rumors [ :4 ] : rumors = Table . grid ( expand = True ) rumors . add_column () rumors . add_column ( justify = \"center\" ) rumors . add_column () rumors . add_row ( \"\" , each [ \"player\" ][ \"name\" ] , \"\" , style = \"bold\" ) rumors . add_row ( \"Ya\u015f\" , \": \" , str ( each [ \"player\" ][ \"age\" ] )) rumors . add_row ( \"Mevki\" , \": \" , each [ \"player\" ][ \"position\" ] ) rumors . add_row ( \"Piyasa de\u011feri\" , \": \" , each [ \"player\" ][ \"marketValue\" ] ) rumors . add_row ( each [ \"team1\" ][ \"name\" ] , \">> \" , each [ \"team2\" ][ \"name\" ] , style = \"bold italic\" ) items . append ( Panel ( rumors , padding = ( 0 , 3 ), box = box . HORIZONTALS ), ) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]G\u00dcNCEL S\u00d6YLENT\u0130LER[/b][/cyan]\" ), box = box . SIMPLE ) @staticmethod def get_footer () : table = Table . grid ( expand = True ) table . add_column () table . add_row ( Align . center ( Text ( \"ozcanyarimdunya\" , style = \"link https://yarimdunya.com\" ) + \" @ {}\" . format ( datetime . today (). year ) ) ) table . add_row ( Align . center ( \"v{}\" . format ( metadata . version ( \"galatasaray\" )) ) ) return Panel ( table , box = box . SIMPLE )","title":"Application"},{"location":"reference/galatasaray/screen/#static-methods","text":"","title":"Static methods"},{"location":"reference/galatasaray/screen/#get_footer","text":"def get_footer ( ) View Source @staticmethod def get_footer () : table = Table . grid ( expand = True ) table . add_column () table . add_row ( Align . center ( Text ( \"ozcanyarimdunya\" , style = \"link https://yarimdunya.com\" ) + \" @ {}\" . format ( datetime . today (). year ) ) ) table . add_row ( Align . center ( \"v{}\" . format ( metadata . version ( \"galatasaray\" )) ) ) return Panel ( table , box = box . SIMPLE )","title":"get_footer"},{"location":"reference/galatasaray/screen/#get_header_middle","text":"def get_header_middle ( ) View Source @staticmethod def get_header_middle () : logo = Group ( Align . center ( \":star::star::star::star:\\n\" ), Align . center ( \"[red]GALATA[/red][yellow]SARAY[/yellow]\\n\" ), Align . center ( \"1905\" ), ) return Panel ( Align . center ( logo , vertical = \"middle\" ), style = \"bold\" , padding = 1 )","title":"get_header_middle"},{"location":"reference/galatasaray/screen/#methods","text":"","title":"Methods"},{"location":"reference/galatasaray/screen/#get_header_left","text":"def get_header_left ( self ) View Source def get_header_left(self): cups = Table.grid(expand=True) cups.add_column(style=\"bold\") cups.add_column() cups.add_column() for count, title in self.scrapper.cups: cups.add_row(count, \" \", title) return Panel(Align.center(cups, vertical=\"middle\"))","title":"get_header_left"},{"location":"reference/galatasaray/screen/#get_header_right","text":"def get_header_right ( self ) View Source def get_header_right ( self ) : return Panel ( Align . center ( f \"Kadro de\u011feri\\n[b]{self.scrapper.team_value}[/b]\" , vertical = \"middle\" ))","title":"get_header_right"},{"location":"reference/galatasaray/screen/#get_main_left","text":"def get_main_left ( self ) View Source def get_main_left(self): left_top = self.get_main_left_top() left_bottom = self.get_main_left_bottom() return Panel(Group(left_top, left_bottom), box=box.SIMPLE)","title":"get_main_left"},{"location":"reference/galatasaray/screen/#get_main_left_bottom","text":"def get_main_left_bottom ( self ) View Source def get_main_left_bottom ( self ) : truths = Table . grid ( expand = True ) truths . add_column () truths . add_column () truths . add_column () tr = self . scrapper . truths truths . add_row ( \"Resmi kul\u00fcp ad\u0131\" , \": \" , tr [ \"legal_name\" ] ) truths . add_row ( \"Adres\" , \": \" , tr [ \"address\" ] ) truths . add_row ( \"Tel\" , \": \" , tr [ \"telephone\" ] ) truths . add_row ( \"Faks\" , \": \" , tr [ \"fax\" ] ) truths . add_row ( \"Web sayfas\u0131\" , \": \" , tr [ \"url\" ] ) truths . add_row ( \"Kurulu\u015f\" , \": \" , tr [ \"founded\" ] ) truths . add_row ( \"\u00dcyeler\" , \": \" , tr [ \"members\" ] ) return Panel ( truths , title = \"[cyan][b]VER\u0130LER & GER\u00c7EKLER[/b][cyan]\" , box = box . SQUARE )","title":"get_main_left_bottom"},{"location":"reference/galatasaray/screen/#get_main_left_top","text":"def get_main_left_top ( self ) View Source def get_main_left_top ( self ) : standings = Table ( expand = True , box = box . SIMPLE ) standings . add_column ( header = \"#\" ) standings . add_column ( header = \"Kul\u00fcp\" ) standings . add_column ( header = \"Ma\u00e7lar\" ) standings . add_column ( header = \"+/-\" ) standings . add_column ( header = \"Puan\" ) for no , club , matches , average , points , highlight in self . scrapper . standings : style = \"u yellow on red\" if highlight else None standings . add_row ( no , club , matches , average , points , style = style ) return Panel ( standings , title = \"[cyan][b]TABLO KES\u0130T\u0130 S\u00dcPER L\u0130G[/b][/cyan]\" , box = box . SQUARE )","title":"get_main_left_top"},{"location":"reference/galatasaray/screen/#get_main_middle","text":"def get_main_middle ( self ) View Source def get_main_middle ( self ) : data = self . scrapper . matches next_matches = data [ \"matches\" ][ :6 ] items = [] for each in next_matches : matches = Table . grid ( expand = True ) matches . add_column () matches . add_column ( justify = \"center\" ) matches . add_column () matches . add_row ( \"\" , each [ \"competition\" ][ \"label\" ] , \"\" ) matches . add_row ( \"\" , datetime . fromtimestamp ( each [ \"match\" ][ \"time\" ] ). strftime ( \"%d.%m.%Y %A - %H:%M\" ), \"\" ) matches . add_row ( Align . left ( data [ \"teams\" ][ str(each[\"match\" ][ \"home\" ] ) ] [ \"name\" ] ), each [ \"match\" ][ \"result\" ] , Align . right ( data [ \"teams\" ][ str(each[\"match\" ][ \"away\" ] ) ] [ \"name\" ] ), ) items . append ( Panel ( matches , padding = ( 0 , 3 ), box = box . HORIZONTALS )) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]SONRAK\u0130 KAR\u015eILA\u015eMALAR[/b][/cyan]\" ), box = box . SIMPLE )","title":"get_main_middle"},{"location":"reference/galatasaray/screen/#get_main_right","text":"def get_main_right ( self ) View Source def get_main_right ( self ) : items = [] for each in self . scrapper . rumors [ :4 ] : rumors = Table . grid ( expand = True ) rumors . add_column () rumors . add_column ( justify = \"center\" ) rumors . add_column () rumors . add_row ( \"\" , each [ \"player\" ][ \"name\" ] , \"\" , style = \"bold\" ) rumors . add_row ( \"Ya\u015f\" , \": \" , str ( each [ \"player\" ][ \"age\" ] )) rumors . add_row ( \"Mevki\" , \": \" , each [ \"player\" ][ \"position\" ] ) rumors . add_row ( \"Piyasa de\u011feri\" , \": \" , each [ \"player\" ][ \"marketValue\" ] ) rumors . add_row ( each [ \"team1\" ][ \"name\" ] , \">> \" , each [ \"team2\" ][ \"name\" ] , style = \"bold italic\" ) items . append ( Panel ( rumors , padding = ( 0 , 3 ), box = box . HORIZONTALS ), ) return Panel ( Panel ( Group ( * items ), title = \"[cyan][b]G\u00dcNCEL S\u00d6YLENT\u0130LER[/b][/cyan]\" ), box = box . SIMPLE )","title":"get_main_right"},{"location":"reference/galatasaray/screen/#run","text":"def run ( self ) View Source def run ( self ) : with Live ( self . layout , screen = True ) : while True : sleep ( 1 )","title":"run"}]}